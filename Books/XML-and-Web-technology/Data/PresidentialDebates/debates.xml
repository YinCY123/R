<article xmlns:r="http://www.r-project.org">
<para>

<r:code>
doc = htmlParse("http://www.debates.org/pages/trans2008c.html")
z = xpathSApply(doc, "//p[contains(., 'MODERATOR')]/following::p", xmlValue)

starts = grep("(BROKAW|MCCAIN|OBAMA):", z)

who = gsub(".*(BROKAW|MCCAIN|OBAMA):.*", "\\1", z[starts])
ids = rep(who, diff(c(starts, length(z)+1)))

text = tapply(z, ids, function(x) x)
</r:code>

If we didn't know the moderator, we could find it.
<r:code>
tmp = xmlValue(getNodeSet(doc, "//p[contains(., 'MODERATOR')]")[[1]])
moderator = gsub(",[ ]?MODERATOR", "", tmp)

</r:code>

<r:code>
sapply(text, length)
sapply(text, function(x) length(unlist(strsplit(x, "[[:space:]]"))))
</r:code>
<r:code>
sentences = lapply(text, function(x) strsplit(paste(x, collapse = "\n"), ".", fixed = TRUE)[[1]])
sapply(sentences,  length)
wordsInSentence = lapply(sentences, strsplit, "[[:space:]]")
numWordsInSentence = lapply(wordsInSentence, function(x) sapply(x, length))
</r:code>
<r:plot>
boxplot(numWordsInSentence)
</r:plot>
<r:plot>
tmp = data.frame(numWords = unlist(numWordsInSentence),
                 who = rep(names(numWordsInSentence), sapply(numWordsInSentence, length)))
densityplot(~ numWords, tmp, group = who, plot.points = FALSE, auto.key = list(columns = length(levels(tmp$who))))
</r:plot>
</para>
<para>
Let's turn the first part of this into a function, i.e. to get the
segments spoken by each candidate.
We might well want to identify the segments by index
so that we preserve the order when we group them by candidate.
<r:function id="getDebate">
getDebate =
function(url = "http://www.debates.org/pages/trans2008c.html",
         moderator = NA, encoding = "ASCII", ...)
{
    doc = htmlParse(url, ..., encoding = encoding)
 
    z = xpathSApply(doc, "//p[contains(., 'MODERATOR')]/following::p", xmlValue)
    if(length(z) == 0) {
       paras = xpathSApply(doc, "//p[@class='bodytext']", xmlValue)
       if(length(paras)) {
         x = paras[[which.max(sapply(paras, nchar))]]
         nchar(
       }
       paras = xpathSApply(doc, "//p", xmlValue)
       i = grep("^[^A-Z]*[A-Z]+:", paras)
       if(!length(i))
           stop("this debate is in a different 'format'")
       if(length(i) == 1) {

       }
       z = paras[- (1:i[1]) ]
    }

    starts = grep("^[^A-Z]*[A-Z]+:", z)

    who = gsub("^[^A-Z]*([A-Z]+):.*", "\\1", z[starts])
    ids = rep(who, diff(c(starts, length(z) + 1)))

    structure(tapply(z, ids, function(x) x), 
              class = "Debate")
}
</r:function>
<r:function>
getSentences =
function(text)
{
   sentences = lapply(text, function(x) 
                               strsplit(paste(x, collapse = "\n"), ".", fixed = TRUE)[[1]])

   lapply(sentences, strsplit, "[[:space:]]")
}
</r:function>
<r:function>
getNumWordsInSentences =
function(sentenceWords)
  structure(lapply(sentenceWords, function(x) sapply(x, length)),
             class = "NumWordsInSentence")
</r:function>
<r:function>
plot.NumWordsInSentence =
function(x, ...)
{
 tmp = data.frame(numWords = unlist(x),
                  who = rep(names(x), sapply(x, length))) 
 densityplot(~ numWords, tmp, group = who, plot.points = FALSE, auto.key = list(columns = length(levels(tmp$who))))
}
</r:function>
<r:function>
plot.Debate =
function(x, ...)
{
 plot(getNumWordsInSentences(getSentences(x)))
}
</r:function>
</para>
<para>
<r:code>
deb08d = getDebate("http://www.debates.org/pages/trans2008d.html" )
plot(getNumWordsInSentences(getSentences(deb08d)))
</r:code>
</para>
<para>
Let's look at the distribution of word length.
We'll remove the common stop words
<r:code>
b = getDebate(urls[3])
sen = getSentences(b)
words = lapply(sen, function(x) unlist(strsplit(unlist(x), "[[:space:][:punct:]]+")))
words = lapply(words, function(x) x [ !(tolower(x) %in% tolower(StopWords))])
tmp = data.frame(words = unlist(lapply(words, nchar)), who = rep(names(words), sapply(words, length)))
densityplot( ~ words, tmp, group = who, auto.key = list(columns = length(words)), 
                plot.points = FALSE, ref = TRUE)
</r:code>
</para>
<para>
What were the common words?
<r:code>
common = sort(table(unlist(words[c("OBAMA", "MCCAIN")])), dec = TRUE)
</r:code>
</para>
<para>

Let's get the URLs for the transcripts of each of  the debates
available from the Commission on Presidential Debates.
<r:code>
toc = htmlParse("http://www.debates.org/pages/debtrans.html")
links = unlist(getNodeSet(toc, "//a/@href"))
trans = grep("^trans", links, value = TRUE)
urls = getRelativeURL(trans, dirname(docName(toc)))
</r:code>
</para>
</article>